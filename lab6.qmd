---
title: "lab6"
format: html
---

```{r}

library(tidyverse)
library(tidymodels)
library(powerjoin)
library(glue)
library(vip)
library(baguette)
```

```{r}
root <- 'https://gdex.ucar.edu/dataset/camels/file'


download.file('https://gdex.ucar.edu/dataset/camels/file/camels_attributes_v2.0.pdf',
              'data/camels_attributes_v2.0.pdf')

# Getting Basin characteristics
types <- c("clim", "geol", "soil", "topo", "vege", "hydro")

remote_files <- glue('{root}/camels_{types}.txt')
local_files <- glue('data/camels_{types}.txt')

walk2(remote_files, local_files, download.file, quiet = TRUE)

camels <- map(local_files, read_delim, show_col_types = FALSE) %>%
  power_full_join(by = 'gauge_id')
```

```{r}
library(ggthemes)
ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = q_mean)) +
  scale_color_gradient(low = "pink", high = "dodgerblue") +
  ggthemes::theme_map()
```

```{r}
# Create a scatter plot of aridity vs rainfall
ggplot(camels, aes(x = aridity, y = p_mean)) +
  # Add points colored by mean flow
  geom_point(aes(color = q_mean)) +
  # Add a linear regression line
  geom_smooth(method = "lm", color = "red", linetype = 2) +
  # Apply the viridis color scale
  scale_color_viridis_c() +
  # Add a title, axis labels, and theme (w/ legend on the bottom)
  theme_linedraw() + 
  theme(legend.position = "bottom") + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow")

```

```{r}
ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  scale_color_viridis_c() +
  # Apply log transformations to the x and y axes
  scale_x_log10() + 
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom") + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow")

```

```{r}
ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  # Apply a log transformation to the color scale
  scale_color_viridis_c(trans = "log") +
  scale_x_log10() + 
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom",
        # Expand the legend width ...
        legend.key.width = unit(2.5, "cm"),
        legend.key.height = unit(.5, "cm")) + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow") 
```

```{r}
#splitting data
set.seed(123)
# Bad form to perform simple transformations on the outcome variable within a 
# recipe. So, we'll do it here.
camels <- camels |> 
  mutate(logQmean = log(q_mean))

# Generate the split
camels_split <- initial_split(camels, prop = 0.8)
camels_train <- training(camels_split)
camels_test  <- testing(camels_split)

camels_cv <- vfold_cv(camels_train, v = 10)


```

```{r}
# Create a recipe to preprocess the data
rec <-  recipe(logQmean ~ aridity + p_mean, data = camels_train) %>%
  # Log transform the predictor variables (aridity and p_mean)
  step_log(all_predictors()) %>%
  # Add an interaction term between aridity and p_mean
  step_interact(terms = ~ aridity:p_mean) |> 
  # Drop any rows with missing values in the pred
  step_naomit(all_predictors(), all_outcomes())

```

```{r}
# Prepare the data
baked_data <- prep(rec, camels_train) |> 
  bake(new_data = NULL)

# Interaction with lm
#  Base lm sets interaction terms with the * symbol
lm_base <- lm(logQmean ~ aridity * p_mean, data = baked_data)
summary(lm_base)

```

```{r}
# Sanity Interaction term from recipe ... these should be equal!!
summary(lm(logQmean ~ aridity + p_mean + aridity_x_p_mean, data = baked_data))

```

```{r}
test_data <-  bake(prep(rec), new_data = camels_test)
test_data$lm_pred <- predict(lm_base, newdata = test_data)
```

```{r}
metrics(test_data, truth = logQmean, estimate = lm_pred)
```

```{r}
ggplot(test_data, aes(x = logQmean, y = lm_pred, colour = aridity)) +
  # Apply a gradient color scale
  scale_color_gradient2(low = "brown", mid = "orange", high = "darkgreen") +
  geom_point() +
  geom_abline(linetype = 2) +
  theme_linedraw() + 
  labs(title = "Linear Model: Observed vs Predicted",
       x = "Observed Log Mean Flow",
       y = "Predicted Log Mean Flow",
       color = "Aridity")

```

```{r}
# Define model
lm_model <- linear_reg() %>%
  # define the engine
  set_engine("lm") %>%
  # define the mode
  set_mode("regression")

# Instantiate a workflow ...
lm_wf <- workflow() %>%
  # Add the recipe
  add_recipe(rec) %>%
  # Add the model
  add_model(lm_model) %>%
  # Fit the model to the training data
  fit(data = camels_train) 

# Extract the model coefficients from the workflow
summary(extract_fit_engine(lm_wf))$coefficients
```

```{r}
# From the base implementation
summary(lm_base)$coefficients
```

```{r}
#
lm_data <- augment(lm_wf, new_data = camels_test)
dim(lm_data)
```

```{r}
metrics(lm_data, truth = logQmean, estimate = .pred)
```

```{r}
ggplot(lm_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw()
```

```{r}
library(baguette)
rf_model <- rand_forest() %>%
  set_engine("ranger", importance = "impurity") %>%
  set_mode("regression")

rf_wf <- workflow() %>%
  # Add the recipe
  add_recipe(rec) %>%
  # Add the model
  add_model(rf_model) %>%
  # Fit the model
  fit(data = camels_train) 
```

```{r}
wf <- workflow_set(list(rec), list(lm_model, rf_model)) %>%
  workflow_map('fit_resamples', resamples = camels_cv) 

autoplot(wf)
```

```{r}

rank_results(wf, rank_metric = "rsq", select_best = TRUE)

```

```{r}
# Load required packages
library(xgboost)
library(baguette)

# Define an XGBoost regression model
xgb_model <- boost_tree(
  trees = 500,
  learn_rate = 0.05
) %>%
  set_engine("xgboost") %>%
  set_mode("regression")

# Define a neural network model using bagged MLPs
nn_model <- bag_mlp() %>%
  set_engine("nnet") %>%
  set_mode("regression")

# Add models to the existing workflow set
all_models <- workflow_set(
  preproc = list(rec),
  models = list(
    linear_regression = lm_model,
    random_forest     = rf_model,
    xgboost           = xgb_model,
    neural_net        = nn_model
  )
)

# Refit all models with cross-validation
all_model_res <- workflow_map(
  all_models,
  fn = "fit_resamples",
  resamples = camels_cv,
  metrics = metric_set(rsq, rmse),
  control = control_resamples(
    save_pred = TRUE,
    verbose = TRUE
  )
)

# Plot performance
autoplot(all_model_res)

# Rank models by RSQ (higher is better)
rank_results(all_model_res, rank_metric = "rsq", select_best = TRUE)

# Rank models by RMSE (lower is better)
rank_results(all_model_res, rank_metric = "rmse", select_best = TRUE)

```

According to the results, it seems like the random forest model is the most effective.

```{r}

# 1. Set seed for reproducibility
set.seed(123)

# 2. Initial data split: 75% training, 25% testing
camels_split <- initial_split(camels, prop = 0.75)

# 3. Extract training and testing sets
camels_train <- training(camels_split)
camels_test  <- testing(camels_split)

# 4. Create 10-fold cross-validation from training data
camels_cv <- vfold_cv(camels_train, v = 10)


```

```{r}
# This recipe models log mean streamflow using both climate and physical landscape features
rec <- recipe(logQmean ~ aridity + p_mean + pet_mean + slope_mean + frac_forest, data = camels_train) %>%
  step_log(aridity, p_mean, pet_mean) %>%  # Apply log-transform to skewed variables
  step_normalize(all_predictors()) %>%     # Normalize predictors for comparability
  step_naomit(all_predictors(), all_outcomes()) # Remove rows with missing data



```

defining 3 models

```{r}
nn_model <- bag_mlp() %>%
  set_engine("nnet") %>%
  set_mode("regression")

xgb_model <- boost_tree() %>%
  set_engine("xgboost") %>%
  set_mode("regression")

nn_model <- bag_mlp() %>%
  set_engine("nnet") %>%
  set_mode("regression")


```

setting workflows

```{r}
# Create a named list of models
models <- list(
  rf = rf_model,
  xgb = xgb_model,
  nn = nn_model
)

# Build the workflow set
wf_set <- workflow_set(
  preproc = list(full_recipe = rec),
  models = models
)

# Fit the models to the resamples
wf_res <- wf_set %>%
  workflow_map(
    fn = "fit_resamples",
    resamples = camels_cv,
    control = control_resamples(save_pred = TRUE, verbose = TRUE)
  )
# Visualize model performance
autoplot(wf_res)

# Rank by R-squared (higher is better)
rank_results(wf_res, rank_metric = "rsq", select_best = TRUE)


```

According to these results, bag_mlp is likely the best model in this scenario.

```{r}


# Build final workflow
final_wf <- workflow() %>%
  add_model(rf_model) %>%
  add_recipe(rec)

# Fit the model to the full training data
final_fit <- final_wf %>%
  fit(data = camels_train)

# Make predictions on the test set
final_results <- augment(final_fit, new_data = camels_test)



ggplot(final_results, aes(x = logQmean, y = .pred, color = aridity)) +
  geom_point(alpha = 0.7) +
  geom_abline(linetype = "dashed", color = "gray30") +
  scale_color_viridis_c(option = "C") +
  theme_minimal() +
  labs(
    title = "Observed vs Predicted Streamflow (Log Scale)",
    x = "Observed Log Mean Flow",
    y = "Predicted Log Mean Flow",
    color = "Aridity Index"
  )



```
